name: Build Android APK - Samsung S25

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 120
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🧹 Free Disk Space
      run: |
        echo "Freeing up disk space for Android build..."
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo apt-get clean
        docker system prune -af || true
        echo "Available disk space after cleanup:"
        df -h
        
    - name: 🎨 Create Required Assets
      run: |
        echo "Installing ImageMagick for asset creation..."
        sudo apt-get update
        sudo apt-get install -y imagemagick
        
        echo "Creating icon.png (512x512) with Samsung theme..."
        convert -size 512x512 xc:'#2196F3' \
                -fill white -pointsize 80 -gravity center \
                -annotate +0+0 'AI' \
                -stroke '#1565C0' -strokewidth 2 \
                -draw "circle 256,256 256,100" \
                icon.png
                
        echo "Creating presplash.png (1080x1920) with Samsung S25 branding..."
        convert -size 1080x1920 xc:'#1565C0' \
                -fill white -pointsize 120 -gravity center \
                -annotate +0-300 'aiDroid' \
                -pointsize 80 -annotate +0-150 'Samsung S25 Pro' \
                -pointsize 50 -annotate +0+100 'Optimiert für Galaxy S25' \
                -pointsize 40 -annotate +0+300 'Loading...' \
                -fill '#E3F2FD' -pointsize 30 -annotate +0+500 'Android 15 Ready' \
                presplash.png
        
        echo "✅ Assets created successfully"
        echo "Asset details:"
        ls -la *.png
        file *.png
        echo "Icon size: $(identify icon.png)"
        echo "Presplash size: $(identify presplash.png)"

    - name: 🔧 Prepare Build Environment
      run: |
        echo "Setting up optimal build environment..."
        
        # Set environment variables for better build performance
        echo "GRADLE_OPTS=-Xmx6144m -Dorg.gradle.daemon=false -Dorg.gradle.parallel=false -Dorg.gradle.configureondemand=false" >> $GITHUB_ENV
        echo "JAVA_OPTS=-Xmx4096m" >> $GITHUB_ENV
        echo "BUILDOZER_LOG_LEVEL=1" >> $GITHUB_ENV
        echo "ANDROID_BUILD_TOOLS_VERSION=34.0.0" >> $GITHUB_ENV
        
        # Show system info
        echo "System Information:"
        echo "CPU cores: $(nproc)"
        echo "Memory: $(free -h)"
        echo "Java version: $(java -version 2>&1 | head -n1)"
        
        # Create build directories
        mkdir -p bin
        mkdir -p .buildozer

    - name: 🔨 Build APK with Buildozer
      uses: ArtemSBulgakov/buildozer-action@v1
      with:
        command: buildozer android debug
        buildozer_version: stable
      env:
        # Optimized environment variables for Samsung S25 build
        GRADLE_OPTS: "-Xmx6144m -Dorg.gradle.daemon=false -Dorg.gradle.parallel=false -Dorg.gradle.configureondemand=false -Dkotlin.incremental=false"
        JAVA_OPTS: "-Xmx4096m -XX:MaxPermSize=512m"
        BUILDOZER_LOG_LEVEL: 1
        ANDROID_BUILD_TOOLS_VERSION: "34.0.0"
        # Prevent memory issues
        _JAVA_OPTIONS: "-Xmx4096m"
        TERM: xterm
        
    - name: 📊 Build Results Analysis
      if: always()
      run: |
        echo "================================="
        echo "🔍 BUILD ANALYSIS REPORT"
        echo "================================="
        echo "Build Status: ${{ job.status }}"
        echo "Build Time: $(date)"
        echo "Runner: ${{ runner.os }} ${{ runner.arch }}"
        echo ""
        
        echo "📱 APK BUILD RESULTS:"
        if [ -d "bin" ]; then
          echo "✅ bin/ directory exists"
          apk_count=$(find bin/ -name "*.apk" 2>/dev/null | wc -l)
          echo "APK files found: $apk_count"
          
          if [ $apk_count -gt 0 ]; then
            echo ""
            echo "📋 APK Details:"
            for apk in bin/*.apk; do
              if [ -f "$apk" ]; then
                echo "  📱 File: $(basename "$apk")"
                echo "  📏 Size: $(du -h "$apk" | cut -f1)"
                echo "  🔍 Type: $(file "$apk" | cut -d: -f2)"
                echo "  📅 Modified: $(stat -c %y "$apk")"
                echo "  ✅ Status: Build SUCCESS"
                echo ""
              fi
            done
          else
            echo "❌ No APK files found in bin/"
          fi
        else
          echo "❌ bin/ directory not found"
        fi
        
        echo "💾 CACHE & STORAGE INFO:"
        if [ -d ".buildozer" ]; then
          cache_size=$(du -sh .buildozer 2>/dev/null | cut -f1 || echo "N/A")
          echo "📦 Buildozer cache size: $cache_size"
          
          # Show buildozer structure
          echo "📁 Buildozer cache structure:"
          find .buildozer -maxdepth 3 -type d 2>/dev/null | head -10 | sed 's/^/  /'
        fi
        
        echo ""
        echo "💽 SYSTEM RESOURCES:"
        echo "📊 Disk usage:"
        df -h | grep -E "(Filesystem|/dev/)"
        echo "🧠 Memory usage:"
        free -h
        
        echo ""
        echo "🏁 BUILD SUMMARY:"
        if [ -f "bin/*.apk" ] || [ "$(find bin/ -name '*.apk' 2>/dev/null | wc -l)" -gt 0 ]; then
          echo "✅ SUCCESS: APK successfully built for Samsung Galaxy S25!"
          echo "🚀 Ready for deployment to Samsung S25 devices"
        else
          echo "❌ FAILED: No APK generated"
          echo "🔧 Check build logs for troubleshooting"
        fi
        
    - name: 📤 Upload APK Artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: aiDroid-Samsung-S25-APK-v${{ github.run_number }}
        path: bin/*.apk
        retention-days: 30
        
    - name: 📝 Upload Build Logs on Failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs-failed-${{ github.run_number }}
        path: |
          .buildozer/
          *.log
          buildozer.spec
        retention-days: 7
        
    - name: 🎉 Success Notification
      if: success()
      run: |
        echo ""
        echo "🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉"
        echo "🚀 aiDroid für Samsung S25 - BUILD SUCCESS!"
        echo "🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉"
        echo ""
        echo "✅ APK erfolgreich erstellt für:"
        echo "   📱 Samsung Galaxy S25"
        echo "   📱 Samsung Galaxy S25+"  
        echo "   📱 Samsung Galaxy S25 Ultra"
        echo ""
        echo "🔽 APK Download verfügbar in GitHub Actions Artifacts"
        echo "🔗 Installationsanleitung:"
        echo "   1. APK von GitHub Actions herunterladen"
        echo "   2. Auf Samsung S25: Einstellungen > Sicherheit > Unbekannte Quellen aktivieren"
        echo "   3. APK installieren: adb install aiDroid-*.apk"
        echo "   4. App öffnen und Samsung S25 Features genießen!"
        echo ""
        echo "🎯 Build #${{ github.run_number }} - $(date)"
